$date
  Tue Jun 20 21:00:51 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module muxinputn_tb $end
$var reg 10 ! a_tb[9:0] $end
$var reg 10 " b_tb[9:0] $end
$var reg 1 # sel_tb $end
$var reg 10 $ q_out[9:0] $end
$scope module dut $end
$var reg 1 % sel $end
$var reg 10 & a[9:0] $end
$var reg 10 ' b[9:0] $end
$var reg 10 ( sal[9:0] $end
$scope module muxgen(0) $end
$scope module muxnbits $end
$var reg 1 ) a_in $end
$var reg 1 * b_in $end
$var reg 1 + sel $end
$var reg 1 , sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(1) $end
$scope module muxnbits $end
$var reg 1 - a_in $end
$var reg 1 . b_in $end
$var reg 1 / sel $end
$var reg 1 0 sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(2) $end
$scope module muxnbits $end
$var reg 1 1 a_in $end
$var reg 1 2 b_in $end
$var reg 1 3 sel $end
$var reg 1 4 sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(3) $end
$scope module muxnbits $end
$var reg 1 5 a_in $end
$var reg 1 6 b_in $end
$var reg 1 7 sel $end
$var reg 1 8 sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(4) $end
$scope module muxnbits $end
$var reg 1 9 a_in $end
$var reg 1 : b_in $end
$var reg 1 ; sel $end
$var reg 1 < sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(5) $end
$scope module muxnbits $end
$var reg 1 = a_in $end
$var reg 1 > b_in $end
$var reg 1 ? sel $end
$var reg 1 @ sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(6) $end
$scope module muxnbits $end
$var reg 1 A a_in $end
$var reg 1 B b_in $end
$var reg 1 C sel $end
$var reg 1 D sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(7) $end
$scope module muxnbits $end
$var reg 1 E a_in $end
$var reg 1 F b_in $end
$var reg 1 G sel $end
$var reg 1 H sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(8) $end
$scope module muxnbits $end
$var reg 1 I a_in $end
$var reg 1 J b_in $end
$var reg 1 K sel $end
$var reg 1 L sal_out $end
$upscope $end
$upscope $end
$scope module muxgen(9) $end
$scope module muxnbits $end
$var reg 1 M a_in $end
$var reg 1 N b_in $end
$var reg 1 O sel $end
$var reg 1 P sal_out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0110001111 !
b1110000011 "
0#
b0110001111 $
0%
b0110001111 &
b1110000011 '
b0110001111 (
1)
1*
0+
1,
1-
1.
0/
10
11
02
03
14
15
06
07
18
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
1E
1F
0G
1H
1I
1J
0K
1L
0M
1N
0O
0P
#200000000
1#
b1110000011 $
1%
b1110000011 (
1+
1/
13
04
17
08
1;
1?
1C
1G
1K
1O
1P
#300000000
0#
b0110001111 $
0%
b0110001111 (
0+
0/
03
14
07
18
0;
0?
0C
0G
0K
0O
0P
#400000000
1#
b1110000011 $
1%
b1110000011 (
1+
1/
13
04
17
08
1;
1?
1C
1G
1K
1O
1P
#800000000
0#
b0110001111 $
0%
b0110001111 (
0+
0/
03
14
07
18
0;
0?
0C
0G
0K
0O
0P
